name: Flutter Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'  # 指定Flutter版本
          channel: 'stable'

      - name: Setup Android NDK
        id: setup_ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: 'r23c' # 对应 23.x.xxxxxxx 版本系列，更稳定
          add-to-path: true
      
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # 确保assets目录存在
      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep
      
      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get
      
      # 更新Android构建配置
      - name: Update Android build configurations
        run: |
          cd android
          
          # 备份原始文件
          cp build.gradle build.gradle.bak
          cp gradle.properties gradle.properties.bak 2>/dev/null || true
          cp app/build.gradle app/build.gradle.bak
          
          # 更新build.gradle中的Gradle插件版本
          sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.3.0/g' build.gradle
          # 更新Kotlin版本
          sed -i 's/ext.kotlin_version = .*$/ext.kotlin_version = "1.9.10"/g' build.gradle
          
          # 优化gradle.properties配置
          cat > gradle.properties << EOF
          # JVM内存配置
          org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          
          # Android配置
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          
          # Gradle优化（禁用以提高稳定性）
          org.gradle.daemon=false
          org.gradle.parallel=false
          org.gradle.caching=false
          org.gradle.configureondemand=false
          android.enableBuildCache=false
          EOF
          
          # 确保app/build.gradle使用声明式方式应用Flutter插件
          if ! grep -q "id 'dev.flutter.flutter-gradle-plugin'" app/build.gradle; then
            sed -i '/id .com.android.application./a\\    id "dev.flutter.flutter-gradle-plugin"' app/build.gradle
          fi
          
          # 移除旧的apply方式
          sed -i '/apply from: "\$flutterRoot\/packages\/flutter_tools\/gradle\/flutter.gradle"/d' app/build.gradle
          
          # 确保使用稳定的SDK版本
          sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' app/build.gradle
          sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' app/build.gradle

      # 验证Flutter配置
      - name: Make gradlew executable
        run: |
          chmod +x android/gradlew

      - name: Verify Flutter configuration
        run: |
          flutter doctor -v
          flutter --version
          cd android && ./gradlew --version
          
      # 清理并重新获取依赖
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get
          
      # 检查依赖冲突
      - name: Check for dependency conflicts
        continue-on-error: true
        run: |
          flutter pub deps
          flutter analyze --no-fatal-infos

      # 创建临时签名密钥（仅用于CI构建）
      - name: Create temporary keystore
        run: |
          cd android
          keytool -genkey -v -keystore temp-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias temp -storepass temppass -keypass temppass -dname "CN=Temp, OU=Temp, O=Temp, L=Temp, S=Temp, C=US"
          
          # 创建key.properties文件
          cat > key.properties << EOF
          storePassword=temppass
          keyPassword=temppass
          keyAlias=temp
          storeFile=temp-keystore.jks
          EOF

      - name: Build Release APK
        run: flutter build apk --release
        env:
          ANDROID_NDK_HOME: ${{ steps.setup_ndk.outputs.ndk-path }}
          
      # 备用构建方案（如果主构建失败）
      - name: Fallback build
        if: failure()
        continue-on-error: true
        run: |
          echo "主构建失败，尝试备用构建方案..."
          
          # 重置到原始配置
          cd android
          cp build.gradle.bak build.gradle 2>/dev/null || true
          cp gradle.properties.bak gradle.properties 2>/dev/null || true
          cp app/build.gradle.bak app/build.gradle 2>/dev/null || true
          
          cd ..
          flutter clean
          flutter pub get
          
          # 使用更保守的构建选项
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g"
          flutter build apk --release --no-shrink

      # 查找生成的APK文件
      - name: Find APK files
        run: |
          echo "=== 查找所有APK文件 ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "没有找到APK文件"
          
          echo "=== 检查主要输出目录 ==="
          ls -la build/app/outputs/flutter-apk/ 2>/dev/null || echo "flutter-apk目录不存在"
          ls -la build/app/outputs/apk/release/ 2>/dev/null || echo "apk/release目录不存在"
          ls -la build/app/outputs/apk/debug/ 2>/dev/null || echo "apk/debug目录不存在"

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/apk/release/app-release.apk
            build/app/outputs/apk/release/*.apk
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
            build/app/outputs/apk/debug/*.apk
          retention-days: 30
          if-no-files-found: warn
          
      # 构建摘要
      - name: Build summary
        if: always()
        run: |
          echo "\n=== 构建摘要 ==="
          echo "Flutter版本: $(flutter --version | head -1)"
          echo "Java版本: $(java -version 2>&1 | head -1)"
          echo "Gradle版本: $(cd android && ./gradlew --version | grep Gradle || echo '未知')"
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ Release APK构建成功"
            ls -lh build/app/outputs/flutter-apk/app-release.apk
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ]; then
            echo "✅ Release APK构建成功（备用路径）"
            ls -lh build/app/outputs/apk/release/app-release.apk
          else
            echo "❌ APK构建失败"
          fi
