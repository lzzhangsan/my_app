name: Flutter Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'  # 指定Flutter版本
          channel: 'stable'

      # 安装并接受 Android SDK 34（与项目 buildToolsVersion 34.0.0 匹配）
      - name: Install Android SDK components
        shell: bash
        run: |
          echo "y" | sdkmanager --licenses || true
          sdkmanager "platforms;android-34" "build-tools;34.0.0" || true

      # 安装 Android NDK r26d（匹配 app/build.gradle 中 ndkVersion 26.1.10909125）
      - name: Setup Android NDK r26d
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true
      
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # 确保assets目录存在
      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep
      
      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get
      
      # 更新Android构建配置
      - name: Update Android build configurations
        run: |
          cd android
          
          # 备份原始文件
          cp build.gradle build.gradle.bak
          cp gradle.properties gradle.properties.bak 2>/dev/null || true
          cp app/build.gradle app/build.gradle.bak
          
          # 更新build.gradle中的Gradle插件版本
          sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.3.0/g' build.gradle
          # 更新Kotlin版本
          sed -i 's/ext.kotlin_version = .*$/ext.kotlin_version = "1.9.10"/g' build.gradle
          
          # 优化gradle.properties配置
          cat > gradle.properties << 'EOF'
          # JVM内存配置
          org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          
          # Android配置
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          
          # Gradle稳定性
          org.gradle.daemon=false
          org.gradle.parallel=false
          org.gradle.caching=false
          org.gradle.configureondemand=false
          android.enableBuildCache=false
          EOF
          
          # 确保使用稳定的SDK版本（34），匹配安装的SDK
          sed -i 's/compileSdk[ ]\+35/compileSdk 34/g' app/build.gradle || true
          sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' app/build.gradle || true

      # 验证Flutter配置
      - name: Make gradlew executable
        run: |
          chmod +x android/gradlew

      - name: Verify Flutter configuration
        run: |
          flutter doctor -v
          flutter --version
          cd android && ./gradlew --version
          
      # 清理并重新获取依赖
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get
          
      # 构建 Release APK（使用 app 中的 signingConfigs.debug，仅供个人使用）
      - name: Build Release APK
        run: flutter build apk --release --no-shrink
      
      # 备用构建方案（如果主构建失败则尝试 Debug）
      - name: Fallback build (Debug)
        if: failure()
        continue-on-error: true
        run: |
          echo "主构建失败，尝试 Debug 构建..."
          flutter clean
          flutter pub get
          flutter build apk --debug

      # 查找生成的APK文件
      - name: Find APK files
        run: |
          echo "=== 查找所有APK文件 ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "没有找到APK文件"
          
          echo "\n=== 检查主要输出目录 ==="
          ls -la build/app/outputs/flutter-apk/ 2>/dev/null || echo "flutter-apk目录不存在"
          ls -la build/app/outputs/apk/debug/ 2>/dev/null || echo "apk/debug目录不存在"
          ls -la build/app/outputs/apk/release/ 2>/dev/null || echo "apk/release目录不存在"

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/apk/release/app-release.apk
            build/app/outputs/apk/release/*.apk
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          retention-days: 7
          if-no-files-found: warn
          
      # 构建摘要
      - name: Build summary
        if: always()
        run: |
          echo "\n=== 构建摘要 ==="
          echo "Flutter版本: $(flutter --version | head -1)"
          echo "Java版本: $(java -version 2>&1 | head -1)"
          echo "Gradle版本: $(cd android && ./gradlew --version | grep Gradle || echo '未知')"
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ Release APK构建成功"
            ls -lh build/app/outputs/flutter-apk/app-release.apk
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ]; then
            echo "✅ Release APK构建成功（备用路径）"
            ls -lh build/app/outputs/apk/release/app-release.apk
          elif [ -f "build/app/outputs/flutter-apk/app-debug.apk" ] || [ -f "build/app/outputs/apk/debug/app-debug.apk" ]; then
            echo "⚠️ 已回退到 Debug APK"
          else
            echo "❌ APK构建失败"
          fi
