name: Build Stable APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock', '**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Configure Android build environment
        run: |
          cd android
          
          # 确保使用Gradle 8.6（使用腾讯云镜像加速）
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://mirrors.cloud.tencent.com/gradle/gradle-8.6-all.zip
networkTimeout=60000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF
          
          # 配置gradle.properties
          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          org.gradle.daemon=false
          org.gradle.parallel=false
          org.gradle.caching=true
          org.gradle.configureondemand=false
          android.enableBuildCache=false
          EOF
          
          # 确保build.gradle使用正确的版本
          sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.4.0/g' build.gradle
          
          # 确保settings.gradle使用正确的版本
          sed -i 's/id "com.android.application" version "[0-9.]\+"/id "com.android.application" version "8.4.0"/g' settings.gradle

      - name: Make gradlew executable
        run: |
          chmod +x android/gradlew

      - name: Verify Flutter setup
        run: |
          flutter doctor -v
          flutter --version
          cd android && ./gradlew --version

      - name: Clean and prepare
        run: |
          flutter clean
          flutter pub get

      - name: Build Debug APK
        run: |
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g"
          export _JAVA_OPTIONS="-Xmx4g"
          flutter build apk --debug --verbose
        timeout-minutes: 30

      - name: Verify APK creation
        run: |
          echo "=== 查找生成的APK文件 ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "没有找到APK文件"
          
          echo "\n=== 检查输出目录 ==="
          ls -la build/app/outputs/flutter-apk/ 2>/dev/null || echo "flutter-apk目录不存在"
          ls -la build/app/outputs/apk/debug/ 2>/dev/null || echo "apk/debug目录不存在"
          
          # 检查APK文件大小
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ APK构建成功:"
            ls -lh build/app/outputs/flutter-apk/app-debug.apk
            file build/app/outputs/flutter-apk/app-debug.apk
          elif [ -f "build/app/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ APK构建成功（备用路径）:"
            ls -lh build/app/outputs/apk/debug/app-debug.apk
            file build/app/outputs/apk/debug/app-debug.apk
          else
            echo "❌ APK构建失败"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-app-debug-apk
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          retention-days: 30
          if-no-files-found: error

      - name: Build summary
        if: always()
        run: |
          echo "\n=== 构建摘要 ==="
          echo "Flutter版本: $(flutter --version | head -1)"
          echo "Java版本: $(java -version 2>&1 | head -1)"
          echo "Gradle版本: $(cd android && ./gradlew --version | grep Gradle || echo '未知')"
          
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ] || [ -f "build/app/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ 构建成功！APK已上传到GitHub Actions artifacts"
            echo "📱 下载APK: 在Actions页面点击本次运行，然后下载'my-app-debug-apk'文件"
          else
            echo "❌ 构建失败"
          fi