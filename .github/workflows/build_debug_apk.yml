name: Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'

      - name: Setup Android NDK
        id: setup_ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: 'r23c' # 对应 23.x.xxxxxxx 版本系列，更稳定
          add-to-path: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 确保assets目录存在
      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep

      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get

      # 验证Flutter环境
      - name: Verify Flutter setup
        run: |
          flutter doctor -v
          flutter --version

      # 清理并重新获取依赖
      - name: Clean and rebuild
        run: |
          flutter clean
          flutter pub get

      # 构建Debug APK（更稳定）
      - name: Build Debug APK
        run: |
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g"
          export _JAVA_OPTIONS="-Xmx4g"
          flutter build apk --debug --verbose
        env:
          ANDROID_NDK_HOME: ${{ steps.setup_ndk.outputs.ndk-path }}

      # 查找APK文件
      - name: Find APK files
        run: |
          echo "=== 查找所有APK文件 ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "没有找到APK文件"
          
          echo "\n=== 检查输出目录 ==="
          ls -la build/app/outputs/flutter-apk/ 2>/dev/null || echo "flutter-apk目录不存在"
          ls -la build/app/outputs/apk/debug/ 2>/dev/null || echo "apk/debug目录不存在"

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
            build/app/outputs/apk/debug/*.apk
          retention-days: 7
          if-no-files-found: warn

      # 构建摘要
      - name: Build summary
        if: always()
        run: |
          echo "\n=== 构建摘要 ==="
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ Debug APK构建成功"
            ls -lh build/app/outputs/flutter-apk/app-debug.apk
          elif [ -f "build/app/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ Debug APK构建成功（备用路径）"
            ls -lh build/app/outputs/apk/debug/app-debug.apk
          else
            echo "❌ APK构建失败"
          fi
