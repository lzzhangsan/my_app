// android/build.gradle

buildscript {
    ext.kotlin_version = '1.9.10'
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    // 全局设置，强制忽略路径检查
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xpkginfo:always"
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    }
}

// 直接配置所有子项目的 Java 和 Kotlin 版本，不使用 afterEvaluate
subprojects {
    if (project.hasProperty('android')) {
        project.android {
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                kotlinOptions {
                    jvmTarget = '17'
                }
            }
        }
    }
    
    // 应用FFmpeg Kit修复补丁
    if (project.name == "ffmpeg_kit_flutter_full") {
        try {
            apply from: rootProject.file('../patches/fix_ffmpeg_kit.gradle')
        } catch (Exception e) {
            println "注意: 无法应用FFmpeg Kit补丁: ${e.message}"
        }
    }

    afterEvaluate { project ->
        if (project.hasProperty('kotlin')) {
            project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                kotlinOptions {
                    jvmTarget = "17"
                }
            }
        }
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}
