// android/build.gradle

buildscript {
    ext.kotlin_version = '1.9.10'  // 更新Kotlin版本匹配settings.gradle
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.0'  // 更新为8.3.0版本
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    // 全局设置，强制忽略路径检查
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xpkginfo:always"
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    }
}

// 添加以下配置来统一所有子项目的 Java 和 Kotlin 版本
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                // 设置 Java 兼容性
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }

                // 配置 Kotlin 编译选项
                tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                    kotlinOptions {
                        jvmTarget = '17'
                    }
                }
            }
        }

        // 如果是photo_manager插件项目
        if (project.name == "photo_manager") {
            project.dependencies {
                implementation "com.github.bumptech.glide:glide:4.15.1"
                annotationProcessor "com.github.bumptech.glide:compiler:4.15.1"
            }
        }

        // 应用FFmpeg Kit修复补丁
        if (project.name == "ffmpeg_kit_flutter_full") {
            try {
                apply from: rootProject.file('../patches/fix_ffmpeg_kit.gradle')
            } catch (Exception e) {
                println "注意: 无法应用FFmpeg Kit补丁: ${e.message}"
            }
        }
    }
}

// 不再使用apply from方式
// apply from: "../patches/fix_photo_manager.gradle"
// apply from: "../patches/fix_permission_handler.gradle"

rootProject.buildDir = file('../build/android')
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"

    // 为每个子项目添加路径检查覆盖
    project.plugins.whenPluginAdded { plugin ->
        if (plugin.class.name.contains('AndroidPlugin')) {
            project.android.properties.overridePathCheck = true
        }
    }
}

// 禁用Gradle守护进程，以防路径问题导致守护进程失败
// Note: gradle.startParameter.useDaemon is not supported in Gradle 8.x
// Use gradle.properties to configure daemon settings instead

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}
