// android/app/build.gradle

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

// 强制禁用路径检查
project.ext.set("android.overridePathCheck", true)
System.setProperty("android.overridePathCheck", "true")

// 读取签名配置
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.example.change_copy2"
    compileSdk 35
    buildToolsVersion "34.0.0" // 明确指定 buildToolsVersion
    ndkVersion "26.1.10909125"  // 使用更新的 NDK 版本

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.change_copy2"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 24
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (keystoreProperties['keyAlias'] != null) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// 配置APK输出路径
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "app-${variant.name}.apk"
        def newOutputDir = new File(project.rootDir.parentFile, "build/app/outputs/apk/${variant.name}")
        if (!newOutputDir.exists()) {
            newOutputDir.mkdirs()
        }
        variant.packageApplicationProvider.get().outputDirectory = newOutputDir
    }
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"  // 更新Kotlin版本
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    // Flutter 插件会自动管理其他依赖项
    implementation "com.github.bumptech.glide:glide:4.15.1"
    annotationProcessor "com.github.bumptech.glide:compiler:4.15.1"
    implementation "androidx.webkit:webkit:1.9.0"  // 添加 WebView 支持
}

// Flutter Gradle 插件已在 plugins 块中声明，无需重复应用

// 添加国内镜像源
allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://repo.huaweicloud.com/repository/maven/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        google()
        mavenCentral()
    }
}

// 修复photo_manager插件的Kotlin版本问题
configurations.all {
    resolutionStrategy {
        force 'org.jetbrains.kotlin:kotlin-stdlib:1.9.10'
        force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10'
        force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.10'
    }
}

